@page "/users/login"
@inject IAuthenticationService _authService
@inject NavigationManager _navigationManager

<div class="container col-12 offset-md-5 pb-2">
    <h3>Login</h3>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="container">
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText id="email" class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>
        <br />
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>
        <br />

        <div class="text-end">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>

    </EditForm>
</div>

@code {
    string message = string.Empty;

    LoginUserDto LoginModel = new LoginUserDto();

    private async Task HandleLogin()
    {
        try
        {
            var response = await _authService.AuthenticateAsync(LoginModel);

            if (response)
            {
                NavigateToHome();
            }
            
            message = "Invalid Credentials, Please Try Again.";
        }
        catch (ApiException ex)
        {
            message = ex.Response;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void NavigateToHome()
    {
        _navigationManager.NavigateTo("/");
    }
}
