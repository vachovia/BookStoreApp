@page "/authors/"
@inject IAuthorService _authService;

<h3>Authors</h3>

@if(response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading Authors...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles="@Roles.Administrator">
            <div class="col-12 col-md-12 text-end py-2 px-4">
                <a class="btn btn-dark" href="/authors/create">
                    <span class="oi oi-script" aria-hidden="true"></span>&nbsp;Create
                </a>
            </div>
        </AuthorizeView>

        <AuthorTable Authors="Authors" TotalSize="TotalSize" OnScroll="LoadAuthors" />
    }    
}

@code {
    public int TotalSize { get; set; }
    public List<AuthorDto> Authors;
    private Response<AuthorDtoVirtualizeResponse> response = new Response<AuthorDtoVirtualizeResponse>
    {
        Success = true
    };

    protected override async Task OnInitializedAsync()
    {
        var queryParams = new QueryParameters { StartIndex = 0 };

        response = await _authService.GetAuthors(queryParams);

        if (response.Success)
        {
            Authors = response.Data.Items.ToList();
        }
    }

    private async Task LoadAuthors(QueryParameters queryParams)
    {
        var virtualizeResult = await _authService.GetAuthors(queryParams);
        Authors = virtualizeResult.Data.Items.ToList();
        TotalSize = virtualizeResult.Data.TotalSize;
    }
}
