@page "/authors/"
@inject IAuthorService _authService;
@inject IJSRuntime _jsRuntime;

<h3>Authors</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
@if(response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading Authors...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles="@Roles.Administrator">
            <div class="col-12 col-md-12 text-end py-2 px-4">
                <a class="btn btn-dark" href="/authors/create">
                    <span class="oi oi-script" aria-hidden="true"></span>&nbsp;Create
                </a>
            </div>
        </AuthorizeView>        

        <table class="table table-striped table-bordered table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a class="btn btn-primary" href="/authors/details/@author.Id">
                                <span class="oi oi-excerpt" aria-hidden="true"></span>&nbsp;Details
                            </a>
                            <AuthorizeView Roles="@Roles.Administrator">
                                <a class="btn btn-warning" href="/authors/edit/@author.Id">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>&nbsp;Edit
                                </a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAuthor(author))>
                                    <span class="oi oi-delete" aria-hidden="true"></span>&nbsp;Delete
                                </button>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }    
}

@code {
    string message = string.Empty;
    private List<AuthorDto> Authors;

    private Response<List<AuthorDto>> response = new Response<List<AuthorDto>>
    {
        Success = true
    };

    protected override async Task OnInitializedAsync()
    {
        response = await _authService.GetAuthors();

        if (response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task DeleteAuthor(AuthorDto author)
    {
        try
        {
            var confirmMsg = $"Are You Sure You Want to Delete {author.FirstName} {author.LastName}?";

            var confirm = await _jsRuntime.InvokeAsync<bool>("confirm", confirmMsg);

            if (confirm)
            {
                var response = await _authService.DeleteAuthor(author.Id);

                if (response.Success)
                {
                    await OnInitializedAsync();
                }
            }
            
        }
        catch (ApiException ex)
        {
            message = ex.Response;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }        
    }
}
