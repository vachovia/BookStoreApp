@page "/authors/details/{id:int}"
@inject IAuthorService _authService;
@inject NavigationManager _navigationManager

<h3>Author Details</h3>
<br />

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="container">
    <EditForm Model="AuthorModel">
        <fieldset disabled="disabled">
            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="AuthorModel.FirstName" />
                <ValidationMessage For="@(() => AuthorModel.FirstName)" />
            </div>
            <br />
            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="AuthorModel.LastName" />
                <ValidationMessage For="@(() => AuthorModel.LastName)" />
            </div>
            <br />
            <div class="form-group">
                <label for="bio">Bio</label>
                <InputTextArea id="bio" class="form-control" @bind-Value="AuthorModel.Bio" />
                <ValidationMessage For="@(() => AuthorModel.Bio)" />
            </div>
            <br />
        </fieldset>

        @if (AuthorModel.Books == null || AuthorModel.Books.Any() == false)
        {
            <div class="alert alert-dismissible alert-secondary">
                No Books for this Author
            </div>
        }
        else
        {
            foreach(var book in AuthorModel.Books)
            {
                <div class="card" style="width: 18rem;">
                    <img class="card-img-top" src="@book.Image" alt="@book.Title">
                    <div class="card-body">
                        <h5 class="card-title">@book.Title - @book.Price.ToString("C")</h5>
                        <p class="card-text">@book.Price</p>
                        <a href="#" class="btn btn-primary">View Book</a>
                    </div>
                </div>
            }
        }       
        <div class="text-end">
            @if (authState.User.IsInRole(Roles.Administrator))
            {
                <button type="button" class="btn btn-warning" @onclick="GoToEdit">
                    <span class="oi oi-pencil"></span>&nbsp;Update Author
                </button>
            }            
            <button type="button" class="btn btn-secondary ms-2" @onclick="BackToList">
                <span class="oi oi-arrow-circle-left"></span>&nbsp;Back To List
            </button>
        </div>

    </EditForm>
</div>

@code {
    string message = string.Empty;

    AuthenticationState authState;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    
    AuthorDetailsDto AuthorModel = new AuthorDetailsDto();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        authState = await _authState;

        if (Id > 0)
        {
            var response = await _authService.GetAuthor(Id);

            if (response.Success)
            {
                AuthorModel = response.Data;
            }
        }
    }

    private void GoToEdit()
    {
        _navigationManager.NavigateTo($"/authors/edit/{AuthorModel.Id}");
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/authors/");
    }
}