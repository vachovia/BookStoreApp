<h3>AuthorTable</h3>
@inject IJSRuntime _jsRuntime;
@inject IAuthorService _authService;

<table class="table table-striped table-bordered table-responsive">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize ItemsProvider="LoadAuthors" Context="author">
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-primary" href="/authors/details/@author.Id">
                        <span class="oi oi-excerpt" aria-hidden="true"></span>&nbsp;Details
                    </a>
                    <AuthorizeView Roles="@Roles.Administrator">
                        <a class="btn btn-warning" href="/authors/edit/@author.Id">
                            <span class="oi oi-pencil" aria-hidden="true"></span>&nbsp;Edit
                        </a>
                        <button class="btn btn-danger" @onclick=@(() => DeleteAuthor(author))>
                            <span class="oi oi-delete" aria-hidden="true"></span>&nbsp;Delete
                        </button>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

@code {
    [Parameter]
    public List<AuthorDto> Authors { get; set; }

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public EventCallback<QueryParameters> OnScroll { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorDto>> LoadAuthors(ItemsProviderRequest request)
    {
        var authorsNumber = Math.Min(request.Count, TotalSize - request.StartIndex);

        await OnScroll.InvokeAsync(new QueryParameters
        {
            StartIndex = request.StartIndex,
            PageSize = authorsNumber == 0 ? request.Count : authorsNumber
        });

        return new ItemsProviderResult<AuthorDto>(Authors, TotalSize);
    }

    private async Task DeleteAuthor(AuthorDto author)
    {
        var confirmMsg = $"Are You Sure You Want to Delete {author.FirstName} {author.LastName}?";

        var confirm = await _jsRuntime.InvokeAsync<bool>("confirm", confirmMsg);

        if (confirm)
        {
            var response = await _authService.DeleteAuthor(author.Id);

            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
