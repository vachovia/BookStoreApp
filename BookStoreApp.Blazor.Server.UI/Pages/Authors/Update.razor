@page "/authors/edit/{id:int}"
@inject IAuthorService _authService;
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Edit Author</h3>
<br />

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="container">
    <EditForm Model="AuthorModel" OnValidSubmit="HandleUpdateAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="AuthorModel.FirstName" />
            <ValidationMessage For="@(() => AuthorModel.FirstName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="AuthorModel.LastName" />
            <ValidationMessage For="@(() => AuthorModel.LastName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="bio">Bio</label>
            <InputTextArea id="bio" class="form-control" @bind-Value="AuthorModel.Bio" />
            <ValidationMessage For="@(() => AuthorModel.Bio)" />
        </div>
        <br />

        <div class="text-end">
            <button type="submit" class="btn btn-primary">
                <span class="oi oi-pencil"></span>&nbsp;Update Author
            </button>
            <button type="button" class="btn btn-secondary" @onclick="BackToList">
                <span class="oi oi-arrow-circle-left"></span>&nbsp;Back To List
            </button>
        </div>

    </EditForm>
</div>

@code {
    string message = string.Empty;

    AuthorUpdateDto AuthorModel = new AuthorUpdateDto();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        if (Id > 0)
        {
            var response = await _authService.GetAuthorForUpdate(Id);
            if (response.Success)
            {
                AuthorModel = response.Data;
            }
        }
    }

    private async Task HandleUpdateAuthor()
    {
        try
        {
            var response = await _authService.EditAuthor(Id, AuthorModel);

            if (response.Success)
            {
                BackToList();
            }

            message = "Something Went Wrong, Please Try Again.";
        }
        catch (ApiException ex)
        {
            message = ex.Response;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/authors/");
    }
}
